// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'detailed_activity.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

DetailedActivity _$DetailedActivityFromJson(Map<String, dynamic> json) =>
    DetailedActivity(
      id: json['id'] == null ? null : BigInt.parse(json['id'] as String),
      externalId: json['external_id'] as String?,
      uploadId: json['upload_id'] == null
          ? null
          : BigInt.parse(json['upload_id'] as String),
      athlete: json['athlete'] == null
          ? null
          : MetaAthlete.fromJson(json['athlete'] as Map<String, dynamic>),
      name: json['name'] as String?,
      distance: (json['distance'] as num?)?.toDouble(),
      movingTime: json['moving_time'] as int?,
      elapsedTime: json['elapsed_time'] as int?,
      totalElevationGain: (json['total_elevation_gain'] as num?)?.toDouble(),
      elevHigh: (json['elev_high'] as num?)?.toDouble(),
      elevLow: (json['elev_low'] as num?)?.toDouble(),
      sportType: $enumDecodeNullable(_$SportTypeEnumMap, json['sport_type']),
      startDate: json['start_date'] == null
          ? null
          : DateTime.parse(json['start_date'] as String),
      startDateLocal: json['start_date_local'] == null
          ? null
          : DateTime.parse(json['start_date_local'] as String),
      timezone: json['timezone'] as String?,
      startLatLng: LatLng.fromJson(json['start_lat_lng']),
      endLatLng: LatLng.fromJson(json['end_lat_lng']),
      achievementCount: json['achievement_count'] as int?,
      kudosCount: json['kudos_count'] as int?,
      commentCount: json['comment_count'] as int?,
      athleteCount: json['athlete_count'] as int?,
      photoCount: json['photo_count'] as int?,
      totalPhotoCount: json['total_photo_count'] as int?,
      map: json['map'] == null
          ? null
          : PolylineMap.fromJson(json['map'] as Map<String, dynamic>),
      trainer: json['trainer'] as bool?,
      commute: json['commute'] as bool?,
      manual: json['manual'] as bool?,
      private: json['private'] as bool?,
      flagged: json['flagged'] as bool?,
      workoutType: json['workout_type'] as int?,
      averageSpeed: (json['average_speed'] as num?)?.toDouble(),
      maxSpeed: (json['max_speed'] as num?)?.toDouble(),
      gearId: json['gear_id'] as String?,
      description: json['description'] as String?,
      photos: json['photos'] == null
          ? null
          : PhotosSummary.fromJson(json['photos'] as Map<String, dynamic>),
      calories: (json['calories'] as num?)?.toDouble(),
      deviceName: json['device_name'] as String?,
      embedToken: json['embed_token'] as String?,
    );

Map<String, dynamic> _$DetailedActivityToJson(DetailedActivity instance) =>
    <String, dynamic>{
      'id': instance.id?.toString(),
      'external_id': instance.externalId,
      'upload_id': instance.uploadId?.toString(),
      'athlete': instance.athlete?.toJson(),
      'name': instance.name,
      'distance': instance.distance,
      'moving_time': instance.movingTime,
      'elapsed_time': instance.elapsedTime,
      'total_elevation_gain': instance.totalElevationGain,
      'elev_high': instance.elevHigh,
      'elev_low': instance.elevLow,
      'sport_type': _$SportTypeEnumMap[instance.sportType],
      'start_date': instance.startDate?.toIso8601String(),
      'start_date_local': instance.startDateLocal?.toIso8601String(),
      'timezone': instance.timezone,
      'start_lat_lng': jsonEncode(instance.startLatLng),
      'end_lat_lng': jsonEncode(instance.endLatLng),
      'achievement_count': instance.achievementCount,
      'kudos_count': instance.kudosCount,
      'comment_count': instance.commentCount,
      'athlete_count': instance.athleteCount,
      'photo_count': instance.photoCount,
      'total_photo_count': instance.totalPhotoCount,
      'map': instance.map?.toJson(),
      'trainer': instance.trainer,
      'commute': instance.commute,
      'manual': instance.manual,
      'private': instance.private,
      'flagged': instance.flagged,
      'workout_type': instance.workoutType,
      'average_speed': instance.averageSpeed,
      'max_speed': instance.maxSpeed,
      'gear_id': instance.gearId,
      'description': instance.description,
      'photos': instance.photos?.toJson(),
      'calories': instance.calories,
      'device_name': instance.deviceName,
      'embed_token': instance.embedToken,
    };

const _$SportTypeEnumMap = {
  SportType.Undefined: 'Undefined',
  SportType.AlpineSki: 'AlpineSki',
  SportType.BackcountrySki: 'BackcountrySki',
  SportType.Badminton: 'Badminton',
  SportType.Canoeing: 'Canoeing',
  SportType.Crossfit: 'Crossfit',
  SportType.EBikeRide: 'EBikeRide',
  SportType.Elliptical: 'Elliptical',
  SportType.EMountainBikeRide: 'EMountainBikeRide',
  SportType.Golf: 'Golf',
  SportType.GravelRide: 'GravelRide',
  SportType.Handcycle: 'Handcycle',
  SportType.HighIntensityIntervalTraining: 'HighIntensityIntervalTraining',
  SportType.Hike: 'Hike',
  SportType.IceSkate: 'IceSkate',
  SportType.InlineSkate: 'InlineSkate',
  SportType.Kayaking: 'Kayaking',
  SportType.Kitesurf: 'Kitesurf',
  SportType.MountainBikeRide: 'MountainBikeRide',
  SportType.NordicSki: 'NordicSki',
  SportType.Pickleball: 'Pickleball',
  SportType.Pilates: 'Pilates',
  SportType.Racquetball: 'Racquetball',
  SportType.Ride: 'Ride',
  SportType.RockClimbing: 'RockClimbing',
  SportType.RollerSki: 'RollerSki',
  SportType.Rowing: 'Rowing',
  SportType.Run: 'Run',
  SportType.Sail: 'Sail',
  SportType.Skateboard: 'Skateboard',
  SportType.Snowboard: 'Snowboard',
  SportType.Snowshoe: 'Snowshoe',
  SportType.Soccer: 'Soccer',
  SportType.Squash: 'Squash',
  SportType.StairStepper: 'StairStepper',
  SportType.StandUpPaddling: 'StandUpPaddling',
  SportType.Surfing: 'Surfing',
  SportType.Swim: 'Swim',
  SportType.TableTennis: 'TableTennis',
  SportType.Tennis: 'Tennis',
  SportType.TrailRun: 'TrailRun',
  SportType.Velomobile: 'Velomobile',
  SportType.VirtualRide: 'VirtualRide',
  SportType.VirtualRow: 'VirtualRow',
  SportType.VirtualRun: 'VirtualRun',
  SportType.Walk: 'Walk',
  SportType.WeightTraining: 'WeightTraining',
  SportType.Wheelchair: 'Wheelchair',
  SportType.Windsurf: 'Windsurf',
  SportType.Workout: 'Workout',
  SportType.Yoga: 'Yoga',
};
